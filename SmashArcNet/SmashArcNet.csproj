<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <Optimize>false</Optimize>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DocumentationFile>SmashArcNet.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>SmashArcNet.xml</DocumentationFile>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!--Determine the current operating system-->
  <!-- https://github.com/KodrAus/rust-csharp-ffi/blob/master/dotnet/Native.targets -->
  <PropertyGroup Condition=" '$(NativeRid)' == 'win-x64' Or ('$(NativeRid)' == '' And '$([MSBuild]::IsOsPlatform(`WINDOWS`))' == 'true') ">
    <IsWindows>true</IsWindows>
    <DefineConstants>$(DefineConstants);WINDOWS</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(NativeRid)' == 'linux-x64' Or ('$(NativeRid)' == '' And '$([MSBuild]::IsOsPlatform(`LINUX`))' == 'true') ">
    <IsLinux>true</IsLinux>
    <IsUnix>true</IsUnix>
    <DefineConstants>$(DefineConstants);LINUX;UNIX</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(NativeRid)' == 'osx-x64'  Or ('$(NativeRid)' == '' And '$([MSBuild]::IsOsPlatform(`OSX`))' == 'true') ">
    <IsMacOS>true</IsMacOS>
    <IsUnix>true</IsUnix>
    <DefineConstants>$(DefineConstants);MACOS;UNIX</DefineConstants>
  </PropertyGroup>
  <PropertyGroup>
        <CargoWorkspacePath>$(MSBuildThisFileDirectory)/../smash-arc</CargoWorkspacePath>
        <CargoTargetPath>$(MSBuildThisFileDirectory)../target</CargoTargetPath>

        <!--Always compile rust with optimizations--> 
        <CargoConfiguration>release</CargoConfiguration>

        <CargoTarget Condition=" '$(IsWindows)' == 'true' ">x86_64-pc-windows-msvc</CargoTarget>
        <CargoTarget Condition=" '$(IsLinux)' == 'true' ">x86_64-unknown-linux-gnu</CargoTarget>
        <CargoTarget Condition=" '$(IsMacOS)' == 'true' ">x86_64-apple-darwin</CargoTarget>
      
        <CargoExtension Condition=" '$(IsWindows)' == 'true' ">dll</CargoExtension>
        <CargoExtension Condition=" '$(IsLinux)' == 'true' ">so</CargoExtension>
        <CargoExtension Condition=" '$(IsMacOS)' == 'true' ">dylib</CargoExtension>

        <CargoArtifact Condition=" '$(IsWindows)' == 'true' ">smash_arc.$(CargoExtension)</CargoArtifact>
        <CargoArtifact Condition=" '$(IsLinux)' == 'true' ">libsmash_arc.$(CargoExtension)</CargoArtifact>
        <CargoArtifact Condition=" '$(IsMacOS)' == 'true' ">libsmash_arc.$(CargoExtension)</CargoArtifact>

        <CargoArtifactPath>$(CargoWorkspacePath)/target/$(CargoTarget)/$(CargoConfiguration)/$(CargoArtifact)</CargoArtifactPath>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Hashes.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="CargoBuild" BeforeTargets="PreBuildEvent">
    <Message Text="$(CargoWorkspacePath)" Importance="high" />
    <Exec Command="cargo build --release --features &quot;libzstd search ffi-bindings&quot; --target $(CargoTarget)" WorkingDirectory="$(CargoWorkspacePath)" />
  </Target>

  <ItemGroup>
    <FilesToCopy Include="$(CargoWorkspacePath)/target/$(CargoTarget)/$(CargoConfiguration)/$(CargoArtifact)" />
  </ItemGroup>
  
  <Target Name="CargoBuildCopy" DependsOnTargets="CargoBuild" AfterTargets="CopyFilesToOutputDirectory">
	  <Message Text="$(CargoArtifactPath)" Importance="high"></Message>
	  <Copy SourceFiles="$(CargoArtifactPath)" DestinationFolder="$(OutDir)" />
  </Target>
</Project>
