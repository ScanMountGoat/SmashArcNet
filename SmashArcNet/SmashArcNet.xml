<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmashArcNet</name>
    </assembly>
    <members>
        <member name="T:SmashArcNet.ArcFile">
            <summary>
            A safe wrapper for the ARC format.
            </summary>
        </member>
        <member name="M:SmashArcNet.ArcFile.Finalize">
            <summary>
            Frees the resources associated with this ARC
            </summary>
        </member>
        <member name="M:SmashArcNet.ArcFile.TryOpenArc(System.String,SmashArcNet.ArcFile@)">
            <summary>
            Tries to create <paramref name="arcFile"/> from <paramref name="path"/>.
            </summary>
            <param name="path">The data.arc file path</param>
            <param name="arcFile">The resulting ARC</param>
            <returns><c>true</c> if the ARC file was opened successfully</returns>
        </member>
        <member name="M:SmashArcNet.ArcFile.TryOpenArcNetworked(System.String,SmashArcNet.ArcFile@)">
            <summary>
            Tries to create <paramref name="arcFile"/> from <paramref name="ip"/>.
            </summary>
            <param name="ip">IP address of console</param>
            <param name="arcFile">The resulting ARC</param>
            <returns><c>true</c> if the ARC file was opened successfully</returns>
        </member>
        <member name="M:SmashArcNet.ArcFile.GetRootNodes">
            <summary>
            Gets the child nodes of the ARC sorted in ascending alphabetical order.
            These will mostly likely be <see cref="F:SmashArcNet.ArcFileTreeNode.FileType.Directory"/> (ex: "fighter/").
            </summary>
            <returns>the child nodes of ARC root</returns>
        </member>
        <member name="M:SmashArcNet.ArcFile.GetChildren(SmashArcNet.ArcFileTreeNode)">
            <summary>
            Gets the children of <paramref name="parent"/> sorted in ascending alphabetical order,
            which may be <see cref="F:SmashArcNet.ArcFileTreeNode.FileType.Directory"/> or <see cref="F:SmashArcNet.ArcFileTreeNode.FileType.File"/>.
            The resulting list will be empty if there are no children.
            </summary>
            <param name="parent">The parent node</param>
            <returns>the child nodes of <paramref name="parent"/></returns>
        </member>
        <member name="T:SmashArcNet.ArcFileTreeNode">
            <summary>
            A directory or file listing in the ARC.
            </summary>
        </member>
        <member name="T:SmashArcNet.ArcFileTreeNode.FileType">
            <summary>
            Indicates whether the node is a directory or file.
            </summary>
        </member>
        <member name="F:SmashArcNet.ArcFileTreeNode.FileType.Directory">
            <summary>
            A directory that will likely contain child nodes.
            </summary>
        </member>
        <member name="F:SmashArcNet.ArcFileTreeNode.FileType.File">
            <summary>
            A file node that will likely have exportable contents and have no children.
            </summary>
        </member>
        <member name="P:SmashArcNet.ArcFileTreeNode.Type">
            <summary>
            The type of file.
            </summary>
        </member>
        <member name="P:SmashArcNet.ArcFileTreeNode.Path">
            <summary>
            The absolute path of the directory or file.
            </summary>
        </member>
        <member name="M:SmashArcNet.ArcFileTreeNode.ToString">
            <summary>
            The string representation of this <see cref="T:SmashArcNet.ArcFileTreeNode"/>
            <para></para>
            examples: "F file.txt", "D dir/dir2"
            </summary>
            <returns>the type and path as a string</returns>
        </member>
        <member name="T:SmashArcNet.HashLabels">
            <summary>
            Contains methods for dealing with path hashes.
            </summary>
        </member>
        <member name="M:SmashArcNet.HashLabels.Initialize(System.String)">
            <summary>
            Initializes the hash dictionary from a path pointing to a line separated list of strings to hash.
            </summary>
            <param name="path">the text file path containing the strings to hash</param>
        </member>
        <member name="T:SmashArcNet.RustTypes.Hash40">
            <summary>
            A CRC32 hash with a specified length.
            </summary>
        </member>
    </members>
</doc>
